// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sumSquaredError
double sumSquaredError(arma::colvec b, arma::colvec y, arma::mat X);
RcppExport SEXP _lessLM_sumSquaredError(SEXP bSEXP, SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sumSquaredError(b, y, X));
    return rcpp_result_gen;
END_RCPP
}
// sumSquaredErrorGradients
arma::rowvec sumSquaredErrorGradients(arma::colvec b, arma::colvec y, arma::mat X);
RcppExport SEXP _lessLM_sumSquaredErrorGradients(SEXP bSEXP, SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sumSquaredErrorGradients(b, y, X));
    return rcpp_result_gen;
END_RCPP
}
// approximateHessian
arma::mat approximateHessian(arma::colvec b, arma::colvec y, arma::mat X, double eps);
RcppExport SEXP _lessLM_approximateHessian(SEXP bSEXP, SEXP ySEXP, SEXP XSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(approximateHessian(b, y, X, eps));
    return rcpp_result_gen;
END_RCPP
}
// elasticNet
Rcpp::List elasticNet(const arma::colvec y, arma::mat X, const arma::rowvec alpha, const arma::rowvec lambda);
RcppExport SEXP _lessLM_elasticNet(SEXP ySEXP, SEXP XSEXP, SEXP alphaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(elasticNet(y, X, alpha, lambda));
    return rcpp_result_gen;
END_RCPP
}
// elasticNetIsta
Rcpp::List elasticNetIsta(const arma::colvec y, arma::mat X, const arma::rowvec alpha, const arma::rowvec lambda);
RcppExport SEXP _lessLM_elasticNetIsta(SEXP ySEXP, SEXP XSEXP, SEXP alphaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(elasticNetIsta(y, X, alpha, lambda));
    return rcpp_result_gen;
END_RCPP
}
// scadIsta
Rcpp::List scadIsta(const arma::colvec y, arma::mat X, const arma::rowvec theta, const arma::rowvec lambda);
RcppExport SEXP _lessLM_scadIsta(SEXP ySEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(scadIsta(y, X, theta, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lessLM_sumSquaredError", (DL_FUNC) &_lessLM_sumSquaredError, 3},
    {"_lessLM_sumSquaredErrorGradients", (DL_FUNC) &_lessLM_sumSquaredErrorGradients, 3},
    {"_lessLM_approximateHessian", (DL_FUNC) &_lessLM_approximateHessian, 4},
    {"_lessLM_elasticNet", (DL_FUNC) &_lessLM_elasticNet, 4},
    {"_lessLM_elasticNetIsta", (DL_FUNC) &_lessLM_elasticNetIsta, 4},
    {"_lessLM_scadIsta", (DL_FUNC) &_lessLM_scadIsta, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_lessLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
